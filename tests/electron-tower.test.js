const { loadHTML, waitFor, createDragEvent } = require('./utils.js');

describe('Electron Tower Building Functionality', () => {
  beforeEach(() => {
    loadHTML();
  });

  afterEach(() => {
    document.documentElement.innerHTML = '';
  });

  describe('Building Area', () => {
    test('should have building container', () => {
      const building = document.getElementById('building');
      expect(building).toBeInTheDocument();
      expect(building.classList.contains('building')).toBe(true);
    });

    test('should have proper building dimensions', () => {
      const building = document.getElementById('building');
      const computedStyle = window.getComputedStyle(building);
      
      expect(computedStyle.minHeight).toBeDefined();
      expect(computedStyle.display).toBe('flex');
      expect(computedStyle.flexDirection).toBe('column-reverse');
    });

    test('should have building background', () => {
      const building = document.getElementById('building');
      const computedStyle = window.getComputedStyle(building);
      
      expect(computedStyle.background).toBeDefined();
      expect(computedStyle.borderRadius).toBeDefined();
    });
  });

  describe('Energy Levels (Floors)', () => {
    test('should have energy level structure', () => {
      const building = document.getElementById('building');
      
      // Check if energy levels are created (they might be generated by JavaScript)
      expect(building).toBeInTheDocument();
    });

    test('should have proper floor styling', () => {
      // Create a test floor to check styling
      const testFloor = document.createElement('div');
      testFloor.className = 'floor';
      testFloor.setAttribute('data-n', '1');
      document.body.appendChild(testFloor);
      
      const computedStyle = window.getComputedStyle(testFloor);
      expect(computedStyle.border).toBeDefined();
      expect(computedStyle.borderRadius).toBeDefined();
      expect(computedStyle.background).toBeDefined();
      
      document.body.removeChild(testFloor);
    });

    test('should have floor labels', () => {
      // Create a test floor with label
      const testFloor = document.createElement('div');
      testFloor.className = 'floor';
      testFloor.innerHTML = '<div class="floor-label">n=1</div>';
      document.body.appendChild(testFloor);
      
      const label = testFloor.querySelector('.floor-label');
      expect(label).toBeInTheDocument();
      expect(label.textContent).toBe('n=1');
      
      document.body.removeChild(testFloor);
    });
  });

  describe('Electron Lobby', () => {
    test('should have electron lobby area', () => {
      const lobby = document.querySelector('.lobby');
      const lobbyArea = document.querySelector('.lobby-area');
      
      expect(lobby).toBeInTheDocument();
      expect(lobbyArea).toBeInTheDocument();
    });

    test('should have lobby styling', () => {
      const lobby = document.querySelector('.lobby');
      const computedStyle = window.getComputedStyle(lobby);
      
      expect(computedStyle.background).toBeDefined();
      expect(computedStyle.borderRadius).toBeDefined();
      expect(computedStyle.padding).toBeDefined();
    });

    test('should have lobby title', () => {
      const lobby = document.querySelector('.lobby');
      const title = lobby.querySelector('.lobby-title');
      
      if (title) {
        expect(title).toBeInTheDocument();
        expect(title.textContent.trim()).toBeTruthy();
      }
    });
  });

  describe('Electron Units', () => {
    test('should have electron unit structure', () => {
      // Create a test electron unit
      const testUnit = document.createElement('div');
      testUnit.className = 'unit';
      testUnit.innerHTML = '<div class="unit-label">1s</div><div class="slots"></div>';
      document.body.appendChild(testUnit);
      
      const label = testUnit.querySelector('.unit-label');
      const slots = testUnit.querySelector('.slots');
      
      expect(label).toBeInTheDocument();
      expect(slots).toBeInTheDocument();
      
      document.body.removeChild(testUnit);
    });

    test('should have proper unit styling', () => {
      const testUnit = document.createElement('div');
      testUnit.className = 'unit';
      document.body.appendChild(testUnit);
      
      const computedStyle = window.getComputedStyle(testUnit);
      expect(computedStyle.background).toBeDefined();
      expect(computedStyle.borderRadius).toBeDefined();
      expect(computedStyle.border).toBeDefined();
      
      document.body.removeChild(testUnit);
    });

    test('should have electron slots', () => {
      // Create a test unit with slots
      const testUnit = document.createElement('div');
      testUnit.className = 'unit';
      testUnit.innerHTML = `
        <div class="slots">
          <div class="slot">↑</div>
          <div class="slot">↓</div>
        </div>
      `;
      document.body.appendChild(testUnit);
      
      const slots = testUnit.querySelectorAll('.slot');
      expect(slots.length).toBe(2);
      
      slots.forEach(slot => {
        expect(slot.classList.contains('slot')).toBe(true);
        expect(slot.textContent).toMatch(/[↑↓]/);
      });
      
      document.body.removeChild(testUnit);
    });
  });

  describe('Game Mechanics', () => {
    test('should have score tracking', () => {
      const scorePanel = document.querySelector('.score');
      const scoreNum = document.getElementById('score');
      
      expect(scorePanel).toBeInTheDocument();
      expect(scoreNum).toBeInTheDocument();
      expect(scoreNum.textContent).toBe('0');
    });

    test('should have game controls', () => {
      const studyControls = document.getElementById('studyControls');
      const gameControls = document.getElementById('gameControls');
      
      expect(studyControls).toBeInTheDocument();
      expect(gameControls).toBeInTheDocument();
    });

    test('should have auto-play toggle', () => {
      const autoPlayToggle = document.getElementById('autoPlayToggle');
      if (autoPlayToggle) {
        expect(autoPlayToggle).toBeInTheDocument();
        expect(autoPlayToggle.querySelector('input[type="checkbox"]')).toBeInTheDocument();
      }
    });

    test('should have exceptions toggle', () => {
      const exceptionsToggle = document.getElementById('exceptionsToggle');
      if (exceptionsToggle) {
        expect(exceptionsToggle).toBeInTheDocument();
        const checkbox = exceptionsToggle.querySelector('input[type="checkbox"]');
        expect(checkbox).toBeInTheDocument();
        expect(checkbox.checked).toBe(true);
      }
    });
  });

  describe('Configuration Display', () => {
    test('should have configuration section', () => {
      const configSection = document.querySelector('.config-section');
      expect(configSection).toBeInTheDocument();
    });

    test('should have configuration items', () => {
      const configItems = document.querySelectorAll('.config-item');
      expect(configItems.length).toBeGreaterThan(0);
    });

    test('should have selected element display', () => {
      const selectedElement = document.getElementById('newCurrentPick');
      if (selectedElement) {
        expect(selectedElement).toBeInTheDocument();
        expect(selectedElement.textContent).toBe('—');
      }
    });

    test('should have electron count display', () => {
      const electronCount = document.getElementById('newElectronCount');
      if (electronCount) {
        expect(electronCount).toBeInTheDocument();
        expect(electronCount.textContent).toBe('0 / 0');
      }
    });

    test('should have ion state display', () => {
      const ionState = document.getElementById('newIonState');
      if (ionState) {
        expect(ionState).toBeInTheDocument();
        expect(ionState.textContent).toBe('—');
      }
    });

    test('should have configuration display', () => {
      const currentConfig = document.getElementById('newCurrentConfig');
      if (currentConfig) {
        expect(currentConfig).toBeInTheDocument();
        expect(currentConfig.textContent).toBe('—');
      }
    });
  });

  describe('Actions and Controls', () => {
    test('should have study actions', () => {
      const studyActions = document.getElementById('studyActions');
      if (studyActions) {
        expect(studyActions).toBeInTheDocument();
        
        const resetBtn = studyActions.querySelector('#resetBtnStudy');
        if (resetBtn) {
          expect(resetBtn).toBeInTheDocument();
          expect(resetBtn.textContent).toContain('Reset Building');
        }
      }
    });

    test('should have game actions', () => {
      const gameActions = document.getElementById('gameActions');
      if (gameActions) {
        expect(gameActions).toBeInTheDocument();
        expect(gameActions.classList.contains('hidden')).toBe(true);
        
        const newGameBtn = gameActions.querySelector('#newGameBtn');
        const resetBtn = gameActions.querySelector('#resetBtnGame');
        
        if (newGameBtn) {
          expect(newGameBtn).toBeInTheDocument();
          expect(newGameBtn.textContent).toContain('New Game');
        }
        
        if (resetBtn) {
          expect(resetBtn).toBeInTheDocument();
          expect(resetBtn.textContent).toContain('Reset Building');
        }
      }
    });
  });

  describe('Responsive Building Layout', () => {
    test('should have mobile-optimized building', () => {
      const building = document.getElementById('building');
      const computedStyle = window.getComputedStyle(building);
      
      // Check if building has responsive properties
      expect(computedStyle.minHeight).toBeDefined();
      expect(computedStyle.borderRadius).toBeDefined();
      expect(computedStyle.padding).toBeDefined();
    });

    test('should have responsive floor layout', () => {
      // Create test floor to check responsive properties
      const testFloor = document.createElement('div');
      testFloor.className = 'floor';
      document.body.appendChild(testFloor);
      
      const computedStyle = window.getComputedStyle(testFloor);
      expect(computedStyle.borderRadius).toBeDefined();
      expect(computedStyle.padding).toBeDefined();
      expect(computedStyle.margin).toBeDefined();
      
      document.body.removeChild(testFloor);
    });

    test('should have responsive unit layout', () => {
      // Create test unit to check responsive properties
      const testUnit = document.createElement('div');
      testUnit.className = 'unit';
      document.body.appendChild(testUnit);
      
      const computedStyle = window.getComputedStyle(testUnit);
      expect(computedStyle.width).toBeDefined();
      expect(computedStyle.minHeight).toBeDefined();
      expect(computedStyle.borderRadius).toBeDefined();
      
      document.body.removeChild(testUnit);
    });
  });

  describe('Accessibility Features', () => {
    test('should have proper ARIA labels', () => {
      const building = document.getElementById('building');
      const lobby = document.querySelector('.lobby');
      
      // Check for accessibility attributes
      expect(building).toBeInTheDocument();
      expect(lobby).toBeInTheDocument();
    });

    test('should have semantic structure', () => {
      const building = document.getElementById('building');
      const lobby = document.querySelector('.lobby');
      const score = document.querySelector('.score');
      
      expect(building).toBeInTheDocument();
      expect(lobby).toBeInTheDocument();
      expect(score).toBeInTheDocument();
    });
  });
});
